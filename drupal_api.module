<?php

class common {
  // Properties
  public $ridVal;
  public $nidVal;
  public $cidVal;

  // Methods
  function get_nid() {
    $nid = db_select('field_data_field_portal_node_id');
    $nid->addField('field_data_field_portal_node_id', 'field_portal_node_id_value');
    $nid->orderBy('field_portal_node_id_value','DESC');
    $nidValOutput = $nid->execute()->fetchField();//node ID with forms related to Job
    $this->nidVal = $nidValOutput;

    return $this->nidVal;
  }

  function get_cid() {
    $cid = db_select('field_data_field_portal_cid');
    $cid->addField('field_data_field_portal_cid', 'field_portal_cid_value');
    $cid->orderBy('field_portal_cid_value','DESC');
    $cidValOutput = $cid->execute()->fetchField();
    $this->cidVal = $cidValOutput;

    return $this->cidVal;
  }

  function get_rid() {
    $rid = db_select('field_data_field_rid');
    $rid->addField('field_data_field_rid', 'field_rid_value');
    $rid->orderBy('field_rid_value','DESC');
    $ridValOutput = $rid->execute()->fetchField();
    $this->ridVal = $ridValOutput;

    return $this->ridVal;
  }

  function authenticate() {
    $params = drupal_get_query_parameters();
    $encodedkey = $params['api_key'];

    $hasKey = db_select('field_data_field_portal_api_key');
    $hasKey->addField('field_data_field_portal_api_key', 'field_portal_api_key_value');
    $hasKey->condition('field_portal_api_key_value', $encodedkey);
    $key = $hasKey->execute()->fetchField();

    if ($key == $encodedkey) {

      return true;
    }
    else {
      return false;
    }
  }
}
/**
 * Implements hook_menu().
 */function drupal_api_menu(){
  $items=array();
  $items['api/get-jobs'] = array(
    'page callback' => 'jobs_page_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['api/get-employers'] = array(
    'page callback' => 'employer_page_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['api/get-applications'] = array(

    'page callback' => 'application_page_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/content/drupal_api_settings'] = array(
    'title' => 'Drupal API settings',
    'description' => 'Configuration for Drupal API module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupal_api_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function jobs_page_callback() {

  $results = [];
  $params = drupal_get_query_parameters();
  $emp_id = $params['employer_id'];//test ID =0/1

  $start_date =$params['start_date'];
  $starttimestamp = strtotime($start_date);

  $end_date = $params['end_date'];
  $endtimestamp = strtotime($end_date);

  $common=new common();
  if($common->authenticate() == TRUE){
    if (isset($emp_id)) {
      // no need to query twice here can get all data by single query
      //provides a response with all jobs for that particular node id
      $query = db_select('node', 'n');
      $query->join('node_expire', 'ne', 'n.nid=ne.nid');
      $query->addField('n', 'nid', 'nid');
      $query->addField('n', 'title', 'title');
      $query->addField('n', 'created', 'created');
      $query->addField('n', 'status', 'status');
      $query->addField('ne', 'expire', 'expire');
      $query->condition('n.uid', $emp_id);
      $query->condition('created', array($starttimestamp,$endtimestamp), 'BETWEEN');
      $data = $query->execute()->fetchAll();

      foreach ($data as $row) {

        $obj = [];
        $obj['nid'] = $row->nid;
        $obj['title'] = $row->title;
        $obj['created'] = $row->created;
        $obj['status'] = $row->status;
        $obj['expire'] = $row->expire;
        $obj['url'] = url("node/$row->nid");
        array_push($results, $obj);

      }

      return drupal_json_output($results);
    }
    else {
      http_response_code(412);
    }
  }
  else {
    http_response_code(401);
  }


}

function employer_page_callback() {

  $common=new common();

  if($common->authenticate() == TRUE){


    //get ID's relevant to employer- get user ID where role ID is 4
    $isEmployer = db_select('users_roles');
    $isEmployer->addField('users_roles', 'uid');
    $isEmployer->condition('rid', $common->get_rid());
    $employerID = $isEmployer->execute()->fetchCol();

    //get employer Data
    $query = db_select('users');
    $query->addField('users', 'uid','uid');
    $query->addField('users', 'name','name');
    $query->addField('users', 'mail','mail');
    $query->addField('users', 'picture','picture');
    $query->condition('uid', $employerID);

    $data = $query->execute()->fetchAll();
    $response = [
      'employers' => []
    ];

    foreach ($data as $row) {

      $file = file_load($row->picture);
      $uri = $file->uri;
      $url = file_create_url($uri);

      $obj = [];
      $obj['uid'] = $row->uid;
      $obj['name'] = $row->name;
      $obj['mail'] = $row->mail;
      $obj['picture'] = $url;
      array_push($response['employers'], $obj);

    }

    return drupal_json_output($response);
  }
  else
  {

    http_response_code(401);

  }

}

function application_page_callback() {
  $results = [];
  $params = drupal_get_query_parameters();
  $job_id = $params['job_id']; //valid job ID =15939,15884,15870

  $start_date =$params['start_date'];
  $starttimestamp = strtotime($start_date);

  $end_date = $params['end_date'];
  $endtimestamp = strtotime($end_date);


  $common = new common();

  if($common->authenticate() == TRUE){
    if (isset($job_id)) {
      $query = db_select('webform_submitted_data');
      $query->addField('webform_submitted_data', 'sid');
      $query->condition('nid', $common->get_nid()); /*Node ID 15 specifies all the submissions related to jobs*/
      $query->condition('data', $job_id);
      $query->condition('cid', $common->get_cid());
      $setofsid = $query->execute()->fetchAll();//submission ID

      $query = db_select('field_data_field_industry');
      $query->addField('field_data_field_industry', 'field_industry_tid');
      $query->condition('entity_id', $job_id);
      $tid = $query->execute()->fetchAll();//get taxanomy ID

      foreach ($tid as $tidValue) {

        $query2 = db_select('taxonomy_term_data');
        $query2->addField('taxonomy_term_data', 'name');
        $query2->condition('tid', $tidValue->field_industry_tid);//get the industry name based on taxanomy ID
        $result2 = $query2->execute()->fetchAll();
      }


      if ($setofsid) {

        foreach ($setofsid as $sid) {

          $querySubmissions = db_select('webform_submitted_data', 'wsd');
          $querySubmissions->join('webform_submissions', 'sd', 'sd.sid=wsd.sid');
          $querySubmissions->leftJoin('webform_component', 'wc', 'wsd.cid = wc.cid');
          $querySubmissions->addField('wsd', 'data');
          $querySubmissions->addField('wsd', 'sid');
          $querySubmissions->addField('wc', 'name');
          $querySubmissions->condition('wsd.sid', $sid->sid);
          $querySubmissions->condition('sd.sid', $sid->sid);
          $querySubmissions->condition('submitted', array($starttimestamp,$endtimestamp), 'BETWEEN');
          $querySubmissions->groupBy('wsd.data');
          $result = $querySubmissions->execute()->fetchAll();


          foreach ($result as $row) {

            if ($row->name == 'Attach your CV') {
              $file = file_load($row->data);
              $obj[$row->name] = file_create_url($file->uri);
            }
            else if($row->name != 'Attach your CV') {

              $obj['id'] = $row->sid;
              $obj[$row->name] = $row->data;
              foreach ($result2 as $jobCategory){
                $obj['job_category']=$jobCategory->name;
              }

            }
          }
          array_push($results, $obj);
        }



      }
      if($obj == NULL)
      {
        $empty=[
          "applications:"=>[]
        ];
        return drupal_json_output($empty);
      }else
      {
        return drupal_json_output($results);
      }

    }
    else {
      http_response_code(412);
    }
  }
  else {
    http_response_code(401);
  }

}


/**
 * Page callback: drupal api settings
 *
 * @see drupal_api_menu()
 */
function drupal_api_form($form, &$form_state) {

  $form['form_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API key'),
    '#description' => t('API key for webform'),
    '#required' => TRUE,
  );
  $form['form_node_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Node ID'),
    '#default_value' => 15,
    '#description' => t('Node ID for webform'),
    '#required' => TRUE,
  );

  $form['form_rid'] = array(
    '#type' => 'textfield',
    '#title' => t('RID'),
    '#default_value' => 4,
    '#description' => t('RID for webform'),
    '#required' => TRUE,
  );
  $form['form_cid'] = array(
    '#type' => 'textfield',
    '#title' => t('CID'),
    '#default_value' => 10,
    '#description' => t('CID for webform'),
    '#required' => TRUE,
  );


  return system_settings_form($form);
}

function submitForm(&$form, &$form_state) {

  $query = db_insert('api_key');
  $query->fields(array(
    'api_key' => $form['values']['form_api_key'],
    'nid' => $form['values']['form_node_id'],
    'rid' => $form['values']['form_rid'],
    'cid' => $form['values']['form_cid']
  ));
  $query->execute();
}
?>
